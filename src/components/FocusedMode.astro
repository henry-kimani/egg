---
/* Render a button to engage focused mode
 * Focused mode does two things
 * - temporarily closes the sidebar
 * - lower the opacity of the pageTableOfContents
*/
import ProfileButton from "@components/user/ProfileButton.astro";

const currentPathname = Astro.url.pathname;

// Allowed paths to show the focused mode button
const isAllowedPathname = currentPathname.startsWith("/year1") || currentPathname.startsWith("/year2");;
---
{ isAllowedPathname ?
  <focused-mode>
    <ProfileButton icon="open-book">Focused Mode</ProfileButton>
  </focused-mode>
: ""
}

<style>

</style>

<script>
class FocusedMode extends HTMLElement {
  focusedButton = this.querySelector('button') as HTMLButtonElement;
  TABLET_WIDTH = 1152;
  sidebar = document.getElementById("starlight__sidebar") as HTMLDivElement;
  toc = document.querySelector(".right-sidebar") as HTMLDivElement;
  theme = document.documentElement.dataset.theme;
  starlightButton = this.querySelector("starlight-menu-button");
  isPC = window.innerWidth >= this.TABLET_WIDTH; // Check: Greater that a tablet

  constructor() {
    super();

    // Check if the window is a pc
    window.onresize = () => {
      this.isPC = window.innerWidth >= this.TABLET_WIDTH; // Check: Greater that a tablet
    };

    this.focusedMode = "0";
  }

  get focusedMode() {
    return sessionStorage.getItem("focused-mode");
  }

  set focusedMode(value) {
    if (value){
      sessionStorage.setItem("focused-mode", value);
    }
  }

  activate() {
    this.focusedMode = "1";
    
    this.sidebar.animate([
      { opacity: 1, transform: "translateX(0)"}, // from
      { opacity: 0, transform: "translateX(-400px)"}, // to
    ], {
        duration: 300,
        easing: 'ease-out'
      });

    this.sidebar.style.opacity = "0";

    // Table of contents
    if (this.isPC) {
      this.toc.animate([
        { opacity: 1}, // from 
        { opacity: .2} // to
      ], {
          duration: 300,
          easing: "ease-out"
        });
      this.toc.style.opacity = ".2";
      this.toc.style.border = "none";
    }
  }

  deactivate() {
    this.focusedMode = "0";

    this.sidebar.animate([
      { opacity: 0, transform: "translateX(-400px)"}, // from
      { opacity: 1, transform: "translateX(0)"}, // to
    ], {
        duration: 150,
        easing: 'ease-in'
    });

    this.sidebar.style.opacity = "1";

    // Table of contents
    if (this.isPC) {
      this.toc.animate([
        { opacity: .2}, // from 
        { opacity: 1} // to
      ], {
          duration: 150,
          easing: "ease-out"
        });
      this.toc.style.opacity = "1";
      this.toc.style.borderInlineStart = "1px solid var(--sl-color-hairline)";
    }
  }

  connectedCallback() {    
    this.focusedButton.addEventListener("click", () => {
      if (this.focusedMode === "1") {
        // if focused mode is on, close it
        this.deactivate();
      } else {
        // Otherwise, activate it
        this.activate();
      }
    });

    /* Allow the opacity to be change for the toc, if the screen is greater that
     * a tablet i.e a PC */
    this.toc?.addEventListener("mouseover", () => {
      if (this.focusedMode === "1" && this.isPC)
        this.toc.style.opacity = "1";
    });

    this.toc?.addEventListener("mouseout", () => {
      if (this.focusedMode === "1" && this.isPC)
        this.toc.style.opacity = ".2";
    });
  }
}
customElements.define('focused-mode', FocusedMode);
</script>
