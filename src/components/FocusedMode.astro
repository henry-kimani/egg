---
/* Render a button to engage focused mode
 * Focused mode does two things
 * - temporarily closes the sidebar
 * - lower the opacity of the pageTableOfContents
 * 
 * Check PageFrame.astro and TwoColumnLayout.astro to see how focused mode changes
 * 
*/
import AstroButton from "@components/buttons/AstroButton.astro";
import { Icon } from "@astrojs/starlight/components";

const currentPathname = Astro.url.pathname;

// Allowed paths to show the focused mode button
const isAllowedPathname = currentPathname.startsWith("/year1") ||
  currentPathname.startsWith("/year2") ||
  currentPathname.startsWith("/year3");
---
{ isAllowedPathname ?
<focused-mode class="grid">
  <AstroButton
    id="focused-mode-button"
    variant="minimal"
    class="justify-start gap-4 pl-4"
  >
    <Icon name="open-book" />
    Focused Mode
  </AstroButton>
  </focused-mode>
: null
}

<style>
/* Change the background color if focused mode is on */
:global([data-focused-mode='true']) #focused-mode-button {
  background-color: var(--sl-color-accent);
  color: white;
}
:global([data-focused-mode='true'][data-theme='dark']) #focused-mode-button {
  background-color: var(--sl-color-accent-high);
  color: var(--sl-color-accent-low);
}

focused-mode {
  display: none !important;
}

@media (min-width: 50rem) {
  focused-mode {
    display: grid !important;
  }
}
</style>

<script>
type FocusedMode = boolean;

const storageKey = "focused-mode";

/* Get a type safe value of focused mode i.e boolean type*/
function parseFocusedMode(theme: unknown): FocusedMode {
  if (theme === "true") return true
    else if (theme === "false") return false;
      else return false;
}

function loadFocusedMode(): FocusedMode {
  /* Make sure local storage exists before loading focused mode and Parse the value
   * found to FocusedMode type*/
  return parseFocusedMode(typeof localStorage !== "undefined" && localStorage.getItem(storageKey));
}

function storeFocusedMode(focusedMode: FocusedMode): void {
  /* Store a string value of focusedMode, local storage does not accept booleans */
  if (typeof localStorage !== "undefined") {
    localStorage.setItem(storageKey, String(focusedMode===true || focusedMode===false ? focusedMode : false));
  }
}

function onFocusedModeChange(focusedMode: FocusedMode) {
  /* When focused mode changes, store it and update the DOM */
  storeFocusedMode(focusedMode);
  document.documentElement.dataset.focusedMode = String(loadFocusedMode());
}

class Focused extends HTMLElement {
  btn = this.querySelector("button");
  constructor() {
    super();

    /* Load focused mode from storage to make changes to the UI */
    onFocusedModeChange(loadFocusedMode()); 

    this.btn?.addEventListener("click", () => {
      onFocusedModeChange(!loadFocusedMode());
    });

    window.addEventListener("resize", () => {});
  }
}

customElements.define('focused-mode', Focused);
</script>
