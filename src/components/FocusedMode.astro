---
/* Render a button to engage focused mode
 * Focused mode does two things
 * - temporarily closes the sidebar
 * - lower the opacity of the pageTableOfContents
*/
import DropdownChidMenu from "@components/buttons/DropdownChildButton.astro";

const currentPathname = Astro.url.pathname;

// Allowed paths to show the focused mode button
const isAllowedPathname = currentPathname.startsWith("/year1") || currentPathname.startsWith("/year2");;
---
{ isAllowedPathname ?
  <focused-mode>
    <DropdownChidMenu icon="open-book">Focused Mode</DropdownChidMenu>
  </focused-mode>
: ""
}

<style>

/* Adding 'important' to override inline styles */
:global(.hide-toc) {
  opacity: .2 !important;
  border: none !important;
  transition: all 0.1s ease-in;
}

:global(.show-toc) {
  opacity: 1 !important;
  border: 1px solid var(--sl-color-hairline) !important;
  transition: all 0.1s ease-out;
}

:global(.show-toc-on-hover) {
  opacity: 1;
  border: 1px solid var(--sl-color-hairline);
}
</style>

<script>
type FocusedMode = boolean;

const storageKey = "focused-mode";

/* Get a type safe value of focused mode i.e boolean type*/
function parseFocusedMode(theme: unknown): FocusedMode {
  if (theme === "true") return true
    else if (theme === "false") return false;
      else return false;
}

function loadFocusedMode(): FocusedMode {
  /* Make sure local storage exists before loading focused mode and Parse the value
   * found to FocusedMode type*/
  return parseFocusedMode(typeof localStorage !== "undefined" && localStorage.getItem(storageKey));
}

function storeFocusedMode(focusedMode: FocusedMode): void {
  /* Store a string value of focusedMode, local storage does not accept booleans */
  if (typeof localStorage !== "undefined") {
    localStorage.setItem(storageKey, String(focusedMode===true || focusedMode===false ? focusedMode : false));
  }
}

function onFocusedModeChange(focusedMode: FocusedMode) {
  /* When focused mode changes, store it and update the DOM */
  storeFocusedMode(focusedMode);
  document.documentElement.dataset.focusedMode = String(loadFocusedMode());
}

class Focused extends HTMLElement {
  btn = this.querySelector("button");
  constructor() {
    super();

    /* Load focused mode from storage to make changes to the UI */
    onFocusedModeChange(loadFocusedMode()); 

    this.btn?.addEventListener("click", () => {
      onFocusedModeChange(!loadFocusedMode());
    });

    window.addEventListener("resize", () => {});
  }
}

customElements.define('focused-mode', Focused);
</script>
