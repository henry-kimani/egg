---
import ProfileDropdownMenuButton from "./ProfileDropdownMenuButton.astro";
import ThemeSelect from "@components/starlight/ThemeSelect.astro";
import FeedbackForm from "@components/forms/FeedbackForm.astro";
import Modal from "@components/modals/Modal.astro";
import FocusedMode from "@components/FocusedMode.astro";
import DropdownChildButton from "@components/buttons/DropdownChildButton.astro";
import ProfileCard from "@components/user/ProfileCard";
---

<section>
  {/* Dropdown Button */}
  <ProfileDropdownMenuButton />

  {/* Dropdown Menu */}
  <div
    id="user-profile-menu"
    class="profile-menu absolute w-56 h-auto rounded-md"
  >
    <!-- Profile -->
    <div class="gap-1 p-1 border-b border-b-[--sl-color-gray-5]">
      <ProfileCard client:load
        iconSize="small"
        button={{
          buttonHref: "/dashboard/profile",
          buttonContent: "Dashboard",
        }}
        description=""
        showPargraph={false}
      />
    </div>

    <!-- Buttons -->
    <div class="p-1">
      <div>
        <ThemeSelect />
      </div>

      <div>
        <DropdownChildButton id="open-feedback-modal" icon="comment">Feedback</DropdownChildButton>
        <Modal dialogId="feedback-form-modal" closeId="close-feedback-modal">
          <FeedbackForm />
        </Modal>
      </div>

      <div class="hidden md:block">
        <FocusedMode />
      </div>
    </div>

    <!-- Log out -->
    <div class="grid border-t border-[--sl-color-gray-5] p-1">
      <signin-signout />
    </div>
    
  </div>
</section>

<style>
  .profile-menu {
    scale: var(--profile-menu-visibility, 0);
    top: calc(var(--sl-nav-height) + var(--sl-nav-pad-y));
    right: var(--sl-nav-pad-y);
    background-color: var(--sl-color-gray-6);
    border: 1px solid var(--sl-color-gray-5);
    display: grid;
    transition: transform 0.1s ease-out;
  }

  :global([aria-expanded="true"]) ~ .profile-menu {
    --profile-menu-visibility: 1;
  }

  :global([data-theme="light"]) .profile-menu {
    background-color: var(--sl-color-gray-7);
  }
</style>

<script>
  const feedbackFormModal = document.getElementById("feedback-form-modal") as HTMLDialogElement;
  const openFeedbackForm = document.getElementById("open-feedback-modal") as HTMLButtonElement;
  const closeFeedbackForm = document.getElementById("close-feedback-modal") as HTMLButtonElement;

  openFeedbackForm.onclick = () => feedbackFormModal.showModal();
  closeFeedbackForm.onclick = () => feedbackFormModal.close();
</script>

<script>
import { $userInfo } from "@stores/userInfoStore";

class SigninSignout extends HTMLElement {
  constructor() {
    super();

    $userInfo.subscribe( user => {
      if (user && user.isLoggedIn) {
        this.renderToDom(this.renderSignOut());
      } else {
        this.renderToDom(this.renderSignIn());
      }
    })
  }

  renderSignOut() {
    return `
      <div class="sign-out-button">
        <form action="/api/auth/signout" class="grid">
          <button class="text-start hover:cursor-pointer w-full p-[0.45rem] pl-10 rounded-md bg-transparent hover:bg-[--sl-color-gray-6] dark:hover:bg-[--sl-color-gray-5]">
            Sign Out
          </button>
        </form>
      </div>
    `;
  }

  renderSignIn() {
    return `
      <div class="sign-in-button grid">
        <a 
          class="no-underline text-[--sl-color-white] p-[0.45rem] pl-10 rounded-md hover:bg-[--sl-color-gray-6] dark:hover:bg-[--sl-color-gray-5]" 
          href="/signin"
        >Sign In</a>
      </div>
    `;
  }

  renderToDom(markUp: string) {
    if (markUp) {
      this.innerHTML = markUp;
    }
  }
}

customElements.define('signin-signout', SigninSignout);
</script>

