---
import type { Props } from "@astrojs/starlight/props";
import type { ImageMetadata } from "astro";
import { LinkButton } from "@astrojs/starlight/components";
import TwoColumnLayout from "@/layouts/TwoColumnLayout.astro";
import ImageContain from "@/components/ui/ImageContain.astro";
import ContentStack from "@/components/ui/ContentStack.astro";

const { hero } = Astro.props.entry.data;
const { title, image, tagline, actions } = hero!;

// Set the image default attributes
const imageAttrs = {
  loading: "eager" as const, // load ASAP
  decoding: "async" as const,
  width: 400,
  height: 400,
  alt: image?.alt || "",
};

// Support dark theme and light theme images
let darkImage: ImageMetadata;
let lightImage: ImageMetadata;
let rawHtml: string | undefined;

/**
 * Since Image is a Union type, with dark and light theme image, we separate
 * as desired below
*/

if (image) {
  if ("dark" in image) {
    // When the two variants are passed
    darkImage = image.dark;
    lightImage = image.light;
  }
}

const imageData = {
  dark: darkImage,
  light: lightImage,
  ...imageAttrs
};
---

<TwoColumnLayout
  class:list={['hero']} 
>

  {/* Title and tagline */}
  <ContentStack isCard={false}> 
    <h1 set:html={title} />
    <div set:html={tagline} class:list={'tagline'} />
    <div>
      {
        actions.map(
          ({ attrs, icon, link: href, text, variant }) => (
            <LinkButton
              {href} {variant} icon={icon?.name} {...attrs}
            >
              {text}
              {icon?.html && <Fragment set:html={icon.html} />}
            </LinkButton>
          )
        )
      }
    </div>
  </ContentStack>

  {/* Image */}
  <ImageContain {...imageData} />

</TwoColumnLayout>

<style>
  /* Adding padding to lg: screen sizes */
  @media (min-width: 1100px) {
    .hero {
      padding-block: clamp(1.5rem, calc(1rem + 10vmin), 5rem);
    }
  } 

  .stack {
    gap: clamp(1rem, calc(1.5rem + 1vw), 2rem);
  }


  h1 {
    font-size: clamp(var(--sl-text-5xl), calc(1rem + 5vw), var(--sl-text-6xl));
    line-height: var(--sl-line-height-headings);
    font-weight: 700;
    color: var(--sl-color-white)
  }
  /* Scale the tagline dynamically */
  .tagline {
    font-size: clamp(var(--sl-text-base), calc(0.0625rem + 2vw), var(--sl-text-xl));
  }
</style>
