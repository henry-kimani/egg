---
import type { Props } from "@astrojs/starlight/props";
import type { ImageMetadata } from "astro";
import { Image } from "astro:assets";
import { LinkButton } from "@astrojs/starlight/components";

const { hero } = Astro.props.entry.data;
const { title, image, tagline, actions } = hero!;

// Set the image default attributes
const imageAttrs = {
  loading: "eager" as const, // load ASAP
  decoding: "async" as const,
  width: 400,
  height: 400,
  alt: image?.alt || "",
};

// Support dark theme and light theme images
let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;

/**
 * Since Image is a Union type, with dark and light theme image, we separate
 * as desired below
 */
if (image) {
  if ("file" in image) {
    // Default, when no image with out dark and light variants is passed
    darkImage = image.file;
  } else if ("dark" in image) {
    // When the two variants are passed
    darkImage = image.dark;
    lightImage = image.light;
  } else {
    rawHtml = image.html;
  }
}
---

<section
  class:list={['hero']} 
  class="flex flex-col justify-evenly items-center gap-9 md:gap-0 md:flex-row"
>

  {/* Title and tagline */}
  <div 
    class:list={['stack']} 
    class="basis-1/2 flex flex-col text-center md:text-start"
  >
    <h1 set:html={title} />
    <div set:html={tagline} class:list={'tagline'} />
    <div>
      {
        actions.map(
          ({ attrs, icon, link: href, text, variant }) => (
            <LinkButton
              {href} {variant} icon={icon?.name} {...attrs}
            >
              {text}
              {icon?.html && <Fragment set:html={icon.html} />}
            </LinkButton>
          )
        )
      }
    </div>
  </div>

  {/* Image */}
    {
      darkImage && (
        <Image
          src={darkImage}
          {...imageAttrs}
          class:list={{ "light:sl-hidden basis-1/2": Boolean(lightImage) }}
        />
      )
    }
    {
      lightImage && (
        <Image src={lightImage} {...imageAttrs} class="dark:sl-hidden basis-1/2" />
      )
    }

</section>

<style>
  @media (min-width: 768px) {
    .hero > img {
      width: min(100%, 25rem);
    }
  }
  /* Adding padding to lg: screen sizes */ 
  @media (min-width: 1100px) {
    .hero {
      padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
    }
  }
  .stack {
    gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
  }
  img {
    object-fit: contain;
    width: min(70%, 20rem);
    height: auto;
  }
  h1 {
    font-size: clamp(var(--sl-text-5xl), calc(1rem + 5vw), var(--sl-text-6xl));
    line-height: var(--sl-line-height-headings);
    font-weight: 700;
    color: var(--sl-color-white)
  }
  /* Scale the tagline dynamically */
  .tagline {
    font-size: clamp(var(--sl-text-base), calc(0.0625rem + 2vw), var(--sl-text-xl));
  }
</style>
