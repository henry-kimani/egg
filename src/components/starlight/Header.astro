---
import config from "virtual:starlight/user-config";
import SiteTitle from "@astrojs/starlight/components/SiteTitle.astro";
import Search from "@astrojs/starlight/components/Search.astro";
import Dropdown from "@components/dropdown/Dropdown.astro";
import DropdownTrigger from "@components/dropdown/DropdownTrigger.astro";
import DropdownContent from "@components/dropdown/DropdownContent.astro";
import DropdownGroup from "@components/dropdown/DropdownGroup.astro";
import AstroButton from "@components/buttons/AstroButton.astro";
import ThemeSelect from "./ThemeSelect.astro";
import ModalFeedbackForm from "@components/modals/ModalFeedbackForm.astro";
import ProfileCard from "@components/user/ProfileCard";
import FocusedMode from "@components/FocusedMode.astro";
import SignInSignOut from "@components/user/SignInSignOut";

const shouldRenderSearch = 
  config.pagefind || config.components.Search !== '@astro/starlight/components/Search.astro';

---

<div class="header">
  <div class="title-wrapper sl-flex">
    <SiteTitle />
  </div>

  <div class="search print:hidden">
    {shouldRenderSearch && <Search />}
  </div>

  <div class="print:hidden flex items-center">
    <Dropdown>
      <DropdownTrigger controlsId="profile-dropdown-menu">
        <AstroButton
          class="rounded-full"
          size="icon"
          variant="secondary"
        >
          <user-first-letter>
            <span class="user-first-letter text-2xl"></span>
          </user-first-letter>
        </AstroButton>
      </DropdownTrigger>
      <DropdownContent id="profile-dropdown-menu">
        {/* User Profile */}
        <DropdownGroup border>
          <ProfileCard
            client:load
            iconSize="small"
            button={{
              buttonHref: "/dashboard/profile",
              buttonContent: "Dashboard"
            }}
            showPargraph={false}
          />
        </DropdownGroup>

        {/* Site Settings */}
        <DropdownGroup border>
          <ThemeSelect />
          <ModalFeedbackForm />
          <FocusedMode />
        </DropdownGroup>

        {/* SignIn and SignOut button */}
        <DropdownGroup border={false}>
          <SignInSignOut 
            client:load 
            icon 
            variant={"minimal"} 
            className="text-[--sl-text-black] dark:text-white justify-start" 
          />
        </DropdownGroup>
      </DropdownContent>
    </Dropdown>
  </div>
</div>

<script>
import { auth } from "@firebase/client";
import { onAuthStateChanged } from "firebase/auth";

class UserFirstLetter extends HTMLElement {
  userFirstLetter = this.querySelector(".user-first-letter") as HTMLSpanElement;

  constructor() {
    super();

    onAuthStateChanged(auth, user => {
      if (user?.displayName) {
        this.userFirstLetter.textContent = user.displayName[0];
      } else {
        this.userFirstLetter.textContent = "A";
      }
    });
  }
}
customElements.define("user-first-letter", UserFirstLetter);
</script>

<script>
class ModalFeedbackForm extends HTMLElement {
  modalFeedbackForm = this.querySelector('#feedback-form-modal') as HTMLDialogElement;
  openFeedbackFormModal = this.querySelector('#open-feedback-modal') as HTMLButtonElement;
  closeFeedbackFormModal = this.querySelector('#close-feedback-modal') as HTMLButtonElement;

  constructor() {
    super();

    this.openFeedbackFormModal?.addEventListener("click", () => this.modalFeedbackForm.showModal());
    this.closeFeedbackFormModal?.addEventListener("click", () => this.modalFeedbackForm.close());
  }
}
customElements.define("modal-feedback-form", ModalFeedbackForm);
</script>

<style>
.header {
  display: grid;
  grid-template-columns: auto 1fr auto; 
  grid-auto-flow: column;
  gap: var(--sl-nav-gap);
  align-content: center;
  height: 100%;
}

.search {
  place-self: end;
}

.title-wrapper{
  overflow: clip;
  padding: 0.25rem;
  margin: -0.25rem;
  min-width: 0;
}

@media (min-width: 50rem) {
  :global(:root[data-has-sidebar]) {
    --__sidebar-pad: calc(2 * var(--sl-nav-pad));
  } 
  :global(:root:not([data-has-toc])) {
    --__toc-width: 0rem;
  }
  .header {
    --__sidebar-width: max(0rem, var(--sl-content-inline-start, 0rem) - var(--sl-nav-pad-x));
    --__main-column-fr: calc(
      ( 
        100% + var(--__sidebar-pad, 0rem) - var(--__toc-width, var(--sl-sidebar-width)) -
        ( 2 * var(--__toc-width, var(--sl-nav-pad-x))) - 
        var(--sl-content-inline-start, 0rem) - 
        var(--sl-content-width)
      ) / 2
    );

    display: grid;
    grid-template-columns: 
      /* 1. (site title): runs up until the main content column's left edge or
      * or the width of the title, which ever is the largest */
      minmax(
        calc(var(--__sidebar-width) + max(0rem, var(--__main-column-fr) - var(--sl-nav-gap))),
        auto
      )
      /* 2. (search box): all the free space available. */
      1fr
      /* 3. (right items): use the space that they need. */
      auto;
  }
  .search {
    width: 100%;
  }
}
</style>

