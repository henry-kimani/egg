---
import SidebarPersister from "@astrojs/starlight/components/SidebarPersister.astro";
import SidebarSublist from "@astrojs/starlight/components/SidebarSublist.astro";
import MobileMenuFooter from "@astrojs/starlight/components/MobileMenuFooter.astro";
import TabContainer from "../tabs/TabContainer.astro";
import TabHeader from "../tabs/TabHeader.astro";
import TabPanel from "../tabs/TabPanel.astro";

const { sidebar } = Astro.locals.starlightRoute;
type SidebarEntry = typeof sidebar;

// Make sure that all top level items in the side bar are groups not links
type Group = Extract<SidebarEntry, { type: "group" }>;
function assertGroups(sidebar: SidebarEntry): asserts sidebar is Group[] {
  for (const entry of sidebar) {
    if (entry.type !== "group")
      throw new Error("Top-level links are not allowed in the docs");
  }
}
assertGroups(sidebar);

// Look up for the current page. The data is later used to show the current page
const isCurrent = (sidebar: SidebarEntry): boolean =>
  sidebar
  .map(entry => entry.type === "link" ? entry.isCurrent : isCurrent(entry.entries))
  .some(entry => entry === true);

---

<SidebarPersister>
  <TabContainer>
    <Fragment slot="tab-list">
      { // The prop initial styles the current tab and show's is corresponding panel
        sidebar.map(({ label, entries }, index) => (
          <TabHeader initial={isCurrent(entries)} index={index}>{label}</TabHeader>
        ))
      }
    </Fragment>
    {
      sidebar.map(({ entries }, index) => (
        <>
          <TabPanel index={index}>
            <SidebarSublist sublist={entries} />
          </TabPanel>
        </>
      ))
    }
  </TabContainer>
</SidebarPersister>

<div class="md:sl-hidden">
  <MobileMenuFooter />
</div>

